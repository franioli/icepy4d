#- Define log levels and folder
log:
  # Log levels: "debug", "info", "warning", "error", "critical"
  level: "info"
  folder: "logs"
  base_filename: "icepy4d"

#- Define paths and base settings
# All pahts MUST be relative to the root folder of icepy4d and
# they will be converted to pathlib.Path when parsing this yaml file)
paths:
  image_dir: "../data/img"
  image_extension: "jpg"
  calibration_dir: "../data/calib"
  results_dir: "../res"
  camera_names: ["p1", "p2"]

#- Processing options
proc:
  #- Epoches to process
  # It can be either 'all' for processing all the epochs,
  # A list of two integers for processing a range of epoches
  # or a list with the epoche numbers to be processed
  epoch_to_process: [0, 158] # [180, 338] # "all" #

  #- Perform tracking of previous epoch matches
  do_tracking: true

  #- Do space resection of first camera
  do_space_resection: false

  #- Load existing results by reading Epochs object from disk (if False, the results will be overwritten)
  load_existing_results: false

  #- If True try to coregister point clouds based on n double points
  do_coregistration: true

  #- Perform full Bundle Adjustment in Agisoft Metashape and build dense cloud
  # (need Agisoft licence properly configured)
  do_metashape_processing: true

  # Warp images of one camera based on the exterior orientation estimated in BBA
  # Zero translation between cameras at different epoches, but rotation only, is assumed to estimate homography transformation
  do_homography_warping: false
  camera_to_warp: "p2"

  save_sparse_cloud: true

#- Georeferencing (i.e. absolute orientation) information
georef:
  #- Camera centers obtained from Metashape model in July [m]
  camera_centers_world: [
      [151.603, 99.254, 91.643], # p1
      [312.889, 300.513, 135.113], # p2
    ]

  #- Targets' information
  # Target information must be stored in file one file per image saved with the name of the relative image (with target_file_ext extension)
  target_dir: "../data/targets"
  target_file_ext: ".csv"
  target_world_file: "target_world.csv"

  #- Targets to use for Absolute Orientation, Space Resection and Bundle Adjustment
  targets_to_use: ["F2", "F12", "F13", "T2", "F10_2"] #
  
#- Other On-Off switches
other:
  #- visualize outputs
  do_viz: true

  #- Point cloud processing
  do_SOR_filter: False

#- Matching options
matching:
  resize: [-1]
  keypoint_threshold: 0.0001
  max_keypoints: 8192 #2048 #   10240
  weights: "outdoor"
  match_threshold: 0.2
  viz_matches: true
  fast_viz: true
  force_cpu: false
  useTile: true
  writeTile2Disk: false
  do_viz_tile: true
  rowDivisor: 2
  colDivisor: 3
  overlap: 400
  #- Threshold [px] and confidence for PyDegensac robust estimation
  # (used to reject false matches and compute relative orientation)
  pydegensac_threshold: 1.5
  pydegensac_confidence: 0.9999

#- Tracking options
tracking:
  resize: [-1]
  keypoint_threshold: 0.0001
  max_keypoints: 12288 # 8192
  weights: "outdoor"
  match_threshold: 0.4
  viz_matches: true
  fast_viz: true
  force_cpu: false
  useTile: true
  writeTile2Disk: false
  do_viz_tile: false
  rowDivisor: 3
  colDivisor: 4
  pydegensac_threshold: 2
  pydegensac_confidence: 0.999

#- Metashape parameters for Bundle Adjustment and Dense Matching
# Note that to use Metashape, you need a license properly configured and you need to enable do_metashape_processing in Proc section of this yaml file.
metashape:
  # Processing parameters:
  optimize_cameras: true
  build_dense: true
  build_mesh: true

  # List containing camera location. Note, that the order may differ from that of icepy4d, because Metashape imports the cameras based on alphabetic order of the images that they belong to (e.g., IMG_1289.jpg that belongs to p2 comes before IMG_2814.jpg that belongs to p1!)
  #TODO: fix camera ordering issue in Metashape.
  camera_location: [
      [312.889, 300.513, 135.113], # p2
      [151.603, 99.254, 91.643], # p1
    ]

  # A-priori accuracy [x, y, z] of cameras and GCPs
  camera_accuracy: [0.01, 0.01, 0.01]
  gcp_accuracy: [0.01, 0.01, 0.01]
  collimation_accuracy: 1 # px

  # List containing interior orientation parameters' to fix (all the remaining parameters are adjusted). Parameters' names are:
  # ["F", "Cx", "Cy", "B1", "B2", "K1", "K2", "K3", "K4", "P1", "P2"]
  # Leave empy if all the parameters should be estimated
  camera_prm_to_fix:
    ["Cx", "Cy", "B1", "B2", "K1", "K2", "K3", "K4", "P1", "P2"]

  # List containing the camera calibration .xml filenames (in Agisoft default format). The list must be in the same order of Metashape camera_location!
  calib_filenames:
    [
      "../data/calib/35mm_280722_selfcal_all_metashape.xml",
      "../data/calib/24mm_280722_selfcal_all_metashape.xml",
    ]

  # Factor for downscaling images in depth maps computation ("Dense accuracy")
  # 1 = use full resulution images ("Ultra High")
  # 2 = half resolution ("High")
  # 4 = 1/4 resolution ("Medium")
  # 8 = 1/8 resolution ("Low")
  # 16 = 1/16 resolution ("Lowest")
  dense_downscale_factor: 2

  # Depth maps filtering: choose between:
  # [NoFiltering, MildFiltering, ModerateFiltering, AggressiveFiltering]
  depth_filter: "ModerateFiltering"

  # Use Omega Phi Kappa angle convention in Metashape
  use_omega_phi_kappa: true

  # Force overwite a project if it already exists or was not properly closed
  force_overwrite_projects: true
